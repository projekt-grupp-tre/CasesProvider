// <auto-generated />
using System;
using CasesProvider.Api.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CasesProvider.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241101145404_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CaseCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            CategoryName = 0,
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7650),
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7640)
                        },
                        new
                        {
                            Id = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            CategoryName = 1,
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7650),
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7650)
                        },
                        new
                        {
                            Id = new Guid("b3945bba-c0e7-48c1-9d67-90d41fb1108d"),
                            CategoryName = 2,
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7650),
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7650)
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CaseStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f96ed1b-749f-45bd-a754-f3b02728133c"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7380),
                            StatusName = 0
                        },
                        new
                        {
                            Id = new Guid("c167f95a-f15c-4544-9acc-d36fe3724302"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7400),
                            StatusName = 1
                        },
                        new
                        {
                            Id = new Guid("b9fd4ff7-ff83-4c5f-8f65-dc7b78a5ca3e"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7410),
                            StatusName = 2
                        },
                        new
                        {
                            Id = new Guid("43d393fa-7461-4e36-a4ea-c1fdfa47b690"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7410),
                            StatusName = 3
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CaseSubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("226374e7-29c0-4f83-bf96-0ceaf9f61304"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7700),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Payment_issues",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7700)
                        },
                        new
                        {
                            Id = new Guid("82bb400d-6f93-47fc-9b3d-b533a78a4c0b"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7720),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Refund_problems",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7700)
                        },
                        new
                        {
                            Id = new Guid("df328cbd-35b8-4eb8-a646-6dbfe7f393fe"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Billing_discrepancies",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730)
                        },
                        new
                        {
                            Id = new Guid("bcb4c0f0-00d0-4526-a220-cbbfc6122420"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Shipping_issues",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730)
                        },
                        new
                        {
                            Id = new Guid("1220a46e-68c9-4141-b9a4-f11804da5881"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Order_cancellation",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7730)
                        },
                        new
                        {
                            Id = new Guid("f40dccc8-0ff6-4c9c-bc3e-a7ae545d3009"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740),
                            ParentCategoryId = new Guid("0972c946-9287-4e06-bb3c-ee93870ffa95"),
                            SubCategoryName = "Return_ticket",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740)
                        },
                        new
                        {
                            Id = new Guid("3553dffa-3e91-4097-9469-da275f12cb3e"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740),
                            ParentCategoryId = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            SubCategoryName = "Login",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740)
                        },
                        new
                        {
                            Id = new Guid("a0e1d419-bfdf-4e8e-b4d8-a7abefb61815"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740),
                            ParentCategoryId = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            SubCategoryName = "Password",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7740)
                        },
                        new
                        {
                            Id = new Guid("c401403e-deb8-4ab4-8d22-bad44bb57e34"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750),
                            ParentCategoryId = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            SubCategoryName = "Verification",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("f8a45634-68d3-4ddd-820c-8b2ddae6622d"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750),
                            ParentCategoryId = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            SubCategoryName = "Profile",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("e95dea58-5926-461e-a216-c70666145241"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750),
                            ParentCategoryId = new Guid("ea83b86a-391f-4d4d-961c-9927f420a8b9"),
                            SubCategoryName = "Security",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("9efb331e-0c03-4983-96de-256cb81b68c6"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7760),
                            ParentCategoryId = new Guid("b3945bba-c0e7-48c1-9d67-90d41fb1108d"),
                            SubCategoryName = "Product_defect",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7750)
                        },
                        new
                        {
                            Id = new Guid("3f0e130c-2e76-4c16-b1ab-331452e18b0d"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7760),
                            ParentCategoryId = new Guid("b3945bba-c0e7-48c1-9d67-90d41fb1108d"),
                            SubCategoryName = "Stock",
                            UpdatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7760)
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CommunicationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CommunicationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94ed9fa1-9390-4387-bf70-6e0f72d3efd1"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7620),
                            Name = 0
                        },
                        new
                        {
                            Id = new Guid("4b29e839-8704-4504-9995-4198b8ff2b63"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7630),
                            Name = 1
                        },
                        new
                        {
                            Id = new Guid("7f9113aa-8794-4be8-99cc-8b0906841741"),
                            CreatedAt = new DateTime(2024, 11, 1, 14, 54, 3, 290, DateTimeKind.Utc).AddTicks(7630),
                            Name = 2
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.SupportCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CaseCoOwnertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseOwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CommunicationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReopenedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseOwnerUserId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseSubCategory", b =>
                {
                    b.HasOne("CasesProvider.Api.Data.Entities.CaseCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.SupportCase", b =>
                {
                    b.HasOne("CasesProvider.Api.Data.Entities.User", "CaseOwnerUser")
                        .WithMany("OwnedCases")
                        .HasForeignKey("CaseOwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CasesProvider.Api.Data.Entities.CaseStatus", "CaseStatus")
                        .WithMany("SupportCases")
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.CaseCategory", "Category")
                        .WithMany("SupportCases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.CommunicationType", "CommunicationType")
                        .WithMany("SupportCases")
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.User", "CustomerUser")
                        .WithMany("CustomerCases")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CaseOwnerUser");

                    b.Navigation("CaseStatus");

                    b.Navigation("Category");

                    b.Navigation("CommunicationType");

                    b.Navigation("CustomerUser");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseCategory", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseStatus", b =>
                {
                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CommunicationType", b =>
                {
                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.User", b =>
                {
                    b.Navigation("CustomerCases");

                    b.Navigation("OwnedCases");
                });
#pragma warning restore 612, 618
        }
    }
}
