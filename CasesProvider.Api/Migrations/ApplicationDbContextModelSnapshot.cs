// <auto-generated />
using System;
using CasesProvider.Api.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CasesProvider.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CaseCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            CategoryName = "Order",
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5190),
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5180)
                        },
                        new
                        {
                            Id = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            CategoryName = "Account",
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5190),
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5190)
                        },
                        new
                        {
                            Id = new Guid("175dd190-6c09-4250-8b3a-79508dcb4809"),
                            CategoryName = "Product",
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5190),
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5190)
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CaseStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3afa4f3-0f56-405a-8dbf-994ad7453c8a"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(4870),
                            StatusName = "NotOpened"
                        },
                        new
                        {
                            Id = new Guid("9125a6e3-a9b6-45ce-9e8a-2bb38d8b394b"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(4910),
                            StatusName = "Opened"
                        },
                        new
                        {
                            Id = new Guid("94a71f03-da7b-49fe-bda2-81c663ca2b47"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(4920),
                            StatusName = "Closed"
                        },
                        new
                        {
                            Id = new Guid("ab6c0bcb-4fbb-47d1-98f9-a71e2e1dea45"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(4920),
                            StatusName = "Reopened"
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseSubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("CaseSubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06ba3355-6c7c-4d3c-8e4a-8037e9982869"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5490),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Payment_issues",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5470)
                        },
                        new
                        {
                            Id = new Guid("7bf80df8-3369-4e9a-af2c-7d18ae2ea45f"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5510),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Refund_problems",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5490)
                        },
                        new
                        {
                            Id = new Guid("43a6265f-4a93-4cca-96a3-e161af602586"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Billing_discrepancies",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5510)
                        },
                        new
                        {
                            Id = new Guid("d307f5a3-6407-420a-8baf-434f13761b5c"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Shipping_issues",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520)
                        },
                        new
                        {
                            Id = new Guid("ab880241-8db5-4a84-bf43-d53068dad4bd"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Order_cancellation",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520)
                        },
                        new
                        {
                            Id = new Guid("23bec84a-41d2-4425-8516-86cf6ef3328b"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5530),
                            ParentCategoryId = new Guid("30f7b87b-ffab-4f2d-8663-0d33b89f91a3"),
                            SubCategoryName = "Return_ticket",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5520)
                        },
                        new
                        {
                            Id = new Guid("3fb2c9ba-bf51-4726-9168-61e44e58bbab"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5530),
                            ParentCategoryId = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            SubCategoryName = "Login",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5530)
                        },
                        new
                        {
                            Id = new Guid("b26b59b6-b454-49ca-9670-7acf697a6317"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5530),
                            ParentCategoryId = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            SubCategoryName = "Password",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5530)
                        },
                        new
                        {
                            Id = new Guid("d433667f-3a49-4044-b7f3-d6fce5367627"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540),
                            ParentCategoryId = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            SubCategoryName = "Verification",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("cfc70c25-164d-43f2-a36e-b2e3fa711753"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540),
                            ParentCategoryId = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            SubCategoryName = "Profile",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("ddc4c33a-46af-4b59-9703-f2927c7e49c9"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540),
                            ParentCategoryId = new Guid("a396f3bb-bff4-4848-882c-00139b7ad9bf"),
                            SubCategoryName = "Security",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("0cfdcec6-be49-4322-b504-6fde76e141cc"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5550),
                            ParentCategoryId = new Guid("175dd190-6c09-4250-8b3a-79508dcb4809"),
                            SubCategoryName = "Product_defect",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5540)
                        },
                        new
                        {
                            Id = new Guid("ac654ac8-879c-46fe-98fd-a364656bc64e"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5550),
                            ParentCategoryId = new Guid("175dd190-6c09-4250-8b3a-79508dcb4809"),
                            SubCategoryName = "Stock",
                            UpdatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5550)
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CommunicationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CommunicationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51682c0b-0e5a-44db-9b5a-09083673957d"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5170),
                            Name = "Chat"
                        },
                        new
                        {
                            Id = new Guid("9fa8de15-679b-4db5-8b38-d1e89207c180"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5170),
                            Name = "Mail"
                        },
                        new
                        {
                            Id = new Guid("9796be22-6a60-43e4-9f8b-d89354ee8fce"),
                            CreatedAt = new DateTime(2024, 11, 1, 15, 27, 40, 876, DateTimeKind.Utc).AddTicks(5170),
                            Name = "Voice_Video"
                        });
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.SupportCase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CaseCoOwnertUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseOwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CommunicationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReopenedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CaseOwnerUserId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseSubCategory", b =>
                {
                    b.HasOne("CasesProvider.Api.Data.Entities.CaseCategory", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.SupportCase", b =>
                {
                    b.HasOne("CasesProvider.Api.Data.Entities.User", "CaseOwnerUser")
                        .WithMany("OwnedCases")
                        .HasForeignKey("CaseOwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CasesProvider.Api.Data.Entities.CaseStatus", "CaseStatus")
                        .WithMany("SupportCases")
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.CaseCategory", "Category")
                        .WithMany("SupportCases")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.CommunicationType", "CommunicationType")
                        .WithMany("SupportCases")
                        .HasForeignKey("CommunicationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CasesProvider.Api.Data.Entities.User", "CustomerUser")
                        .WithMany("CustomerCases")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CaseOwnerUser");

                    b.Navigation("CaseStatus");

                    b.Navigation("Category");

                    b.Navigation("CommunicationType");

                    b.Navigation("CustomerUser");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseCategory", b =>
                {
                    b.Navigation("SubCategories");

                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CaseStatus", b =>
                {
                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.CommunicationType", b =>
                {
                    b.Navigation("SupportCases");
                });

            modelBuilder.Entity("CasesProvider.Api.Data.Entities.User", b =>
                {
                    b.Navigation("CustomerCases");

                    b.Navigation("OwnedCases");
                });
#pragma warning restore 612, 618
        }
    }
}
